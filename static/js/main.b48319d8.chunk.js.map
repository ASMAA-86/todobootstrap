{"version":3,"sources":["Listitem.js","App.js","serviceWorker.js","index.js"],"names":["ListItem","state","completed","textDecoration","toggletask","console","log","_this","setState","_React$createElement","_this2","this","itemData","props","item","react_default","a","createElement","className","Object","defineProperty","type","onClick","removeTask","index","src","height","Component","App","formData","task","items","updateForm","event","newData","target","value","originalState","copy","assign","name","submitForm","preventDefault","slice","push","deleteAll","splice","tasksList","map","Listitem","onSubmit","onChange","length","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b48319d8.chunk.js","sourcesContent":["// * Step 4. * Next add`completed` to the`ListItem` components state that defaults to`false` and gets updated to`true` when a user clicks on the`li`.When the state`completed` is`true` it should add a CSS class that adds a strikethrough to the`li`.Similar to our hide and show memes.\n//.strikethrough\n// * Step 5. * Next add a form with an`input` that when submitted will add an`item` to the`items` array in state.Similar to our add a meme form.\n\nimport React, { Component } from \"react\";\n\nclass ListItem extends Component {\n  state = {\n    completed: false,\n    textDecoration: \"false\" //plz look at App.css\n  };\n\n  toggletask = () => {\n    console.log(\"Hello\");\n    //was true and it shown with strikethroug!!\n    if (this.state.completed === false) {\n      this.setState({\n        completed: true,\n        textDecoration: \"strikethrough\"\n      });\n    } else {\n      this.setState({\n        completed: false,\n        textDecoration: \"false\"\n      });\n    }\n  };\n\n  render() {\n    //it's just a variable BP\n\n    const itemData = this.props.item;\n\n    return (\n      <div className=\"mt-5\">\n        <div\n          className=\"btnFontStyle\"\n          className={this.state.textDecoration}\n          onClick={this.toggletask}\n        >\n          <input className=\"btnFontStyle\" type=\"checkbox\" />\n          <span className=\"text-white\"> {itemData} </span>\n          <button\n            className=\"delete\"\n            onClick={() => this.props.removeTask(this.props.index)}\n          >\n            <img\n              src=\"https://png.pngtree.com/svg/20170814/fy_recycle_bin_358384.png\"\n              height=\"20px\"\n            />\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ListItem;\n","// Make To Do List responsive\n// Save data to localstorage or API\n\n//-------\n// Use 3rd party API with Axios\n// Use a 3rd party library\n\nimport React, { Component } from \"react\";\nimport ListItem from \"./Listitem\";\nimport \"./App.css\";\nimport CSSTransitionGroup from \"react-transition-group/CSSTransitionGroup\";\n\nclass App extends Component {\n  state = {\n    formData: {\n      task: \"\"\n    },\n    items: []\n  };\n\n  updateForm = event => {\n    //get the value the user typed\n    const newData = event.target.value;\n    //get the original state\n    const originalState = this.state.formData;\n    //make a copy of the original state\n    const copy = Object.assign({}, originalState);\n    //get key from name of input\n    const key = event.target.name;\n    //update the copy with tha data the user typed\n    copy[key] = newData;\n    //update the state with the new copy override the original\n    this.setState({\n      formData: copy\n    });\n  };\n  //declare local storage\n  // componentDidMount() {\n  //   if (!localStorage.getItem(\"itemKey\")) {\n  //     localStorage.setItem(\"itemKey\", this.state.items);\n  //   }\n\n  //   localStorage.getItem(\"itemKey\") &&\n  //     this.setState({ items: JSON.parse(localStorage.getItem(\"itemKey\")) });\n  //   //dealing with  web server have to use json\n  // }\n\n  submitForm = event => {\n    //prevent the form from refreshing the page\n    event.preventDefault();\n    //make a copy of the memes array\n    const copy = this.state.items.slice(0);\n//test to prevent pushing until be sure the array is empty\n    if(this.state.formData.task !== \"\"){\n    //add the new meme data to the array\n    copy.push(this.state.formData.task);\n    //updata the state with our new copy\n    this.setState({\n      items: copy,\n      //to reset the value of the input failed\n      formData: {\n        task: \"\"\n      }\n    });\n  }\n    //localStorage.setItem(\"itemKey\", copy);\n  };\n\n  deleteAll = event => {\n    this.setState({\n      items: []\n    });\n  };\n  removeTask = index => {\n    //  copy our items array\n    //  remove item based on the index\n    //  set state with the updated array\n    const copy = this.state.items;\n    copy.splice(index, 1);\n    // copy.splice(copy.indexof(this.state.formData.task), 1);\n    this.setState({\n      items: copy\n    });\n  };\n\n  render() {\n    //map fn iterate the array and return item and index by default\n    const tasksList = this.state.items.map((item, index) => {\n      return (\n        //item and index to know what the fn must applay to\n        //to manipulat item in child have to pass an arguments to it and here we pass item and index\n        //RemoveTask function where task deleted by index\n        <ListItem item={item} index={index} removeTask={this.removeTask} />\n      );\n    });\n    //Form must keep it for submit only\n\n    return (\n      <div className=\"container mt-5\">\n        <div className=\"container todo\">\n          <div>\n            <h3 className=\"fontStyle \">My ToDo </h3>\n          </div>\n          <form onSubmit={this.submitForm}>\n            <div className=\"row\">\n              <input\n                type=\"text\"\n                name=\"task\"\n                className=\"col-8\"\n                onChange={this.updateForm}\n                value={this.state.formData.task}\n              />\n              <button type=\"submit\" className=\"btnStyle btnFontStyle col-2\">\n                New Task\n              </button>\n\n              <button\n                onClick={this.deleteAll}\n                className=\"btnStyle btnFontStyle col-2\"\n              >\n                Clear all\n              </button>\n            </div>\n          </form>\n          <footer className=\"Operaquotes\">\n            <h1>\"Any thing you can imagine, you can create!\"</h1>\n            <p>Opera Winfrey</p>\n          </footer>\n\n          { console.log( this.state.items)}\n            \n            \n            { this.state.items.length === 0 ? \"\" : tasksList}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n//test if the length of the array is 0 if T type \"\" if not type my list\n//{ this.state.items.length === 0 ? \"\" : tasksList}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"../node_modules/bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}